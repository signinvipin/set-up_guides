Docker Setup on EC2 VM

system requirement: 4GB RAM 

how to install Docker Engine on Linux, also known as Docker CE (community edition now docker engine).
https://docs.docker.com/engine/install/

For CentOS:
https://docs.docker.com/engine/install/centos/

Uninstall if any previous installation present on existing server
> sudo dnf remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

> Remove Images, containers, volumes, and networks stored in '/var/lib/docker/'

Create EC2 server

Go super user:
$ sudo su

Setup repository urls for centos:
$ sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
$ sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
Optional
$ yum install epel-release -y

Update repo data cache
$ yum update -y

Install using the rpm repository
$ sudo dnf -y install dnf-plugins-core
$ sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

Install latest docker engine
> $ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Enable docker for start with system start 
$ sudo systemctl enable docker

Run docker service
$ sudo systemctl start docker

Verify that the installation is successful by running the hello-world image:
$ sudo docker run hello-world

Uninstall Docker Engine:
$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

Delete all images, containers, and volumes:
Images, containers, volumes, or custom configuration files on your host aren't automatically removed.
$ sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd

## Working with docker ##

Check all containers (even not running)
$ docker ps -a

Lists only the currently running containers
$ docker ps

Check docker images present in repository
$ docker images

Pull an image from docker registry
$ docker pull <image-name>

Run the image and enter bash mode
$ docker run -it <image-name> bash

To remove a image, we first
Remove running container 
$ docker rm <name>
then,
Remove that image
$ docker rmi <image_id> or <image_name>:<tag_name>
eg. docker rmi signinvipin/jenkins:lts-jdk17
eg. docker rmi 6f0166f5e399
can use image id if no other tag with that image is present

To remove an image already pushed first 
$ docker rmi <image>
then goto Hub webpage select tag and click delete to remove the tag.

To remove all stopped containers at once:
$ docker container prune

Login to docker account CLI (to push images to hub, need to login)
$ docker login -u <username>

Create a new repository then, tag and push image to it:
Tag image
$ docker tag <image_id or image_name> <username>/<image_repo_name/image_name>
eg. docker tag 6f0166f5e399 signinvipin/jenkins:lts-jdk17
Push image to docker private repository
$ docker push <username>/<image_name>:<tag_name>
eg. docker push signinvipin/jenkins:lts-jdk17 

Tag and push image to existing docker repository
$ docker tag alpine signinvipin/jenkins_repo:alpine (or latest as tag name) 
where 'signinvipin/jenkins_repo' is the repo name and 
'alpine' is the image name, then push it as
$ docker push signinvipin/jenkins_repo:alpine

Push is only possible to private repository 
$ docker push <image_id or name> signinvipin/<image_name>:<tag_name> or <image_id> 
not to public repository from where we pull the image as
$ docker push jenkins/jenkins:tag signinvipin/jenkins/jenkins:tag